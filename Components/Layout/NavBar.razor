@namespace WiseWallet.Components.Layout
@using WiseWallet.Models
@using System.Text.Json;
@using WiseWallet.Services

<nav class="navbar navbar-expand-lg navbar-light bg-white shadow-sm">
    <div class="container-fluid">
        <!-- Left: Project Name -->
        <a class="navbar-brand fw-bold text-orange" asp-controller="Home" asp-action="Index" href="/dashboard">Wise Wallet</a>

        <!-- Navbar Toggler -->
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <!-- Center: Links -->
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav me-auto">
                <li class="nav-item">
                    <a class="nav-link text-orange fw-semibold" asp-controller="Transaction" asp-action="Index" href="/transaction">Transaction</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link text-orange fw-semibold" asp-controller="Debt" asp-action="ViewDebt" href="/debt">View Debt</a>
                </li>
            </ul>

            <!-- Right: Currency Section -->
            <div class="d-flex align-items-center">
                <select class="form-select me-2" @bind="SelectedCurrency" aria-label="Select Currency">
                    <option value="NRS">Nepali Rs</option>
                    <option value="INR">Indian Rs</option>
                </select>
                <button class="btn btn-orange" @onclick="SubmitCurrencyChange">Change</button>
            </div>
        </div>
    </div>
</nav>

<div class="container mt-3">
    @if (!string.IsNullOrEmpty(ChangeMessage))
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @ChangeMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
</div>

<style>
    .navbar {
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .navbar-brand {
        font-size: 1.5rem;
    }

    .nav-link {
        color: orange !important;
        font-weight: 500;
    }

    .btn-orange {
        background-color: orange;
        color: white;
        border: none;
        font-weight: bold;
    }

        .btn-orange:hover {
            background-color: darkorange;
            color: white;
        }

    .form-select {
        width: 200px;
    }

    .btn {
        min-width: 100px;
    }
</style>

@code {
    private string SelectedCurrency = "NRS"; // Default or fetched value
    private int CurrentUserId;
    private string ChangeMessage;

    protected override void OnInitialized()
    {
        // Get the logged-in user's information
        var loggedInUser = LoginServices.GetLoggedInUser();
        if (loggedInUser != null)
        {
            CurrentUserId = loggedInUser.UserId; // Set the current user ID
            SelectedCurrency = loggedInUser.CurrencyType; // Pre-select user's current currency
        }
    }

    private async void SubmitCurrencyChange()
    {
        UpdateCurrencyTypeInJson(SelectedCurrency);
        await Task.Delay(2000); // Wait for 2 seconds
        ChangeMessage = null;   // Clear the message
        StateHasChanged();      // Trigger UI update
    }

    private void UpdateCurrencyTypeInJson(string newCurrency)
    {
        var loggedInUser = LoginServices.GetLoggedInUser();
        if (loggedInUser != null && loggedInUser.UserId == CurrentUserId)
        {
            string FilePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Desktop), "WiseWallet", "DataStore.json");

            // Read existing data
            List<UserModel> users = new List<UserModel>();
            if (File.Exists(FilePath))
            {
                var fileContent = File.ReadAllText(FilePath);
                users = JsonSerializer.Deserialize<List<UserModel>>(fileContent) ?? new List<UserModel>();
            }

            // Update the currency type for the logged-in user
            var userToUpdate = users.FirstOrDefault(u => u.UserId == CurrentUserId);
            if (userToUpdate != null)
            {
                // Calculate the exchange rate (hardcoded for simplicity; replace with real logic)
                decimal exchangeRate = GetExchangeRate(userToUpdate.CurrencyType, newCurrency);

                // Update transaction amounts in Income and Expenses lists
                foreach (var transaction in userToUpdate.Income)
                {
                    transaction.ConvertAmount(exchangeRate);
                }

                foreach (var transaction in userToUpdate.Expenses)
                {
                    transaction.ConvertAmount(exchangeRate);
                }

                // Update debt amounts
                foreach (var debt in userToUpdate.Debts)
                {
                    debt.ConvertAmount(exchangeRate);
                }

                // Update the currency type
                userToUpdate.CurrencyType = newCurrency;

                // Serialize the updated list back to JSON
                string updatedJson = JsonSerializer.Serialize(users, new JsonSerializerOptions { WriteIndented = true });
                File.WriteAllText(FilePath, updatedJson);

                // Show success message
                ChangeMessage = $"Currency changed to {newCurrency}.";
            }
        }
    }

    // Example method to get exchange rate
    private decimal GetExchangeRate(string fromCurrency, string toCurrency)
    {
        if (fromCurrency == "NRS" && toCurrency == "INR") return 0.62m; // Example: 1 NRS = 0.62 INR
        if (fromCurrency == "INR" && toCurrency == "NRS") return 1.61m; // Example: 1 INR = 1.61 NRS
        return 1; // No conversion needed if the currencies are the same
    }

}
