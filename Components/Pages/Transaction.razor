@page "/transaction"

@using WiseWallet.Components.Layout
@using WiseWallet.Models
@using WiseWallet.Services

<NavBar />

<div class="container py-4">
    <div class="row">
        <!-- Form Section -->
        <div class="col-md-4 mb-4">
            <div class="card border-warning">
                <div class="card-body">
                    <h5 class="card-title">Add the Transaction</h5>
                    <p class="card-text text-muted">Now it's easy to track your transaction</p>
                    <form>
                        @if (!string.IsNullOrEmpty(ValidationError))
                        {
                            <div class="alert alert-danger">
                                @ValidationError
                            </div>
                        }

                        <div class="mb-3">
                            <label for="date" class="form-label">Date</label>
                            <input type="date" class="form-control" id="date" @bind="NewTransaction.Date">
                        </div>
                        <select class="form-select" id="type" @bind="SelectedType" @bind:after="UpdateAvailableTags">
                            <option value="">Select Type</option>
                            <option value="income">Income</option>
                            <option value="expense">Expense</option>
                        </select>

                        
                        <div class="mb-3">
                            <label for="tags" class="form-label">Tags</label>
                            <div class="input-group">
                                <select class="form-select" id="tags" @onchange="HandleTagSelection">
                                    @foreach (var tag in AvailableTags)
                                    {
                                        <option value="@tag">@tag</option>
                                    }
                                    <option value="add_custom_tag">+ Add Custom Tag</option>
                                </select>

                            </div>
                        </div>

                        @if (IsCustomTagModalOpen)
                        {
                            <div class="modal show d-block" tabindex="-1">
                                <div class="modal-dialog">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title">Add Custom Tag</h5>
                                            <button type="button" class="btn-close" @onclick="CloseCustomTagModal"></button>
                                        </div>
                                        <div class="modal-body">
                                            <input type="text" class="form-control" @bind="NewCustomTag" placeholder="Enter custom tag" />
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-primary" @onclick="SaveCustomTag">Save</button>
                                            <button type="button" class="btn btn-secondary" @onclick="CloseCustomTagModal">Cancel</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }

                        <div class="mb-3">
                            <label for="amount" class="form-label">Amount</label>
                            <input type="number" class="form-control" id="amount" placeholder="Enter amount" @bind="NewTransaction.Amount">
                        </div>
                        <div class="mb-3">
                            <label for="note" class="form-label">Add the note</label>
                            <textarea class="form-control" id="note" rows="2" placeholder="Enter note" @bind="NewTransaction.Note"></textarea>
                        </div>
                        <button type="button" class="btn btn-warning w-100" @onclick="SubmitTransactionForm">
                            Add Cash
                        </button>
                    </form>
                </div>
            </div>
        </div>

        <!-- Table Section -->
        <div class="col-md-8 mb-4">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h5>Total Income: Rs @TotalIncome</h5>
                <h5>Total Expenses: Rs @TotalExpenses</h5>
                <div class="d-flex align-items-center">
                    <input type="text" class="form-control me-2" placeholder="Search by Tags Title"
                           @oninput="(e) => SearchTransaction(e.Value.ToString())" style="max-width: 200px;">
                    <label for="filter" class="me-2 mb-0">Filter</label>
                    <select class="form-select form-select-sm d-inline w-auto" id="filter" @onchange="FilterTransactions">
                        <option value="all">All</option>
                        <option value="income">Income</option>
                        <option value="expense">Expense</option>
                    </select>
                </div>
            </div>
            <div class="card border-warning">
                <div class="card-body p-0">
                    <table class="table table-bordered table-hover mb-0">
                        <thead class="table-warning">
                            <tr>
                                <th>Date</th>
                                <th>Type</th>
                                <th>Tags</th>
                                <th>Amount</th>
                                <th>Note</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (FilteredTransactions == null || !FilteredTransactions.Any())
                            {
                                <tr>
                                    <td colspan="6" class="text-center">No transactions found.</td>
                                </tr>
                            }
                            else
                            {
                                @foreach (var transaction in FilteredTransactions)
                                {
                                    <tr>
                                        <td>@transaction.Date.ToShortDateString()</td>
                                        <td>@transaction.Type</td>
                                        <td>@transaction.Tags</td>
                                        <td>Rs @transaction.Amount</td>
                                        <td>@transaction.Note</td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    private TransactionModel NewTransaction = new();
    private string SelectedType = string.Empty;
    private List<TransactionModel> Transactions = new();
    private List<TransactionModel> FilteredTransactions = new();
    private int TransactionIndex = 1; // For serial numbers
    private decimal TotalIncome;
    private decimal TotalExpenses;
    private List<string> IncomeTags = new List<string> { "Salary", "Bonus", "Investments" };
    private List<string> ExpenseTags = new List<string> { "Groceries", "Food", "Rent" };
    private List<string> AvailableTags = new List<string>();
    private string SelectedTag = string.Empty;
    private bool IsCustomTagModalOpen = false;
    private string NewCustomTag = string.Empty;

    protected override void OnInitialized()
    {
        var loggedInUser = LoginServices.GetLoggedInUser();
        if (loggedInUser != null)
        {
            RefreshTransactions(loggedInUser.UserId);
        }
        else
        {
            Console.WriteLine("No user is logged in. Cannot fetch transactions.");
        }
    }

    protected override void OnParametersSet()
    {
        UpdateAvailableTags();
    }

    private void UpdateAvailableTags()
    {
        if (SelectedType == "income")
        {
            AvailableTags = new List<string>(IncomeTags);
        }
        else if (SelectedType == "expense")
        {
            AvailableTags = new List<string>(ExpenseTags);
        }
        else
        {
            AvailableTags = new List<string>();
        }
    }

    private void HandleTypeChange(ChangeEventArgs e)
    {
        SelectedType = e.Value?.ToString() ?? string.Empty;
        UpdateAvailableTags();
    }

    private void HandleTagSelection(ChangeEventArgs e)
    {
        if (e.Value?.ToString() == "add_custom_tag")
        {
            OpenCustomTagModal();
        }
    }
    private void OpenCustomTagModal()
    {
        IsCustomTagModalOpen = true;
    }


    private void CloseCustomTagModal()
    {
        IsCustomTagModalOpen = false;
        NewCustomTag = string.Empty;
    }

    private void SaveCustomTag()
    {
        if (!string.IsNullOrWhiteSpace(NewCustomTag) && !AvailableTags.Contains(NewCustomTag))
        {
            AvailableTags.Add(NewCustomTag);
            SelectedTag = NewCustomTag; // Automatically select the new custom tag
        }
        CloseCustomTagModal();
    }

    private void RefreshTransactions(int userId)
    {
        Transactions = TransactionServices.GetUserTransactions(userId);
        FilteredTransactions = Transactions;
        CalculateTotals();
    }

    private string ValidationError = string.Empty; // To store validation error messages.

    private void SubmitTransactionForm()
    {
        ValidationError = string.Empty; // Clear previous error messages.
        var loggedInUser = LoginServices.GetLoggedInUser();

        if (loggedInUser != null && !string.IsNullOrEmpty(SelectedType))
        {
            if (SelectedType == "expense" && NewTransaction.Amount > TotalIncome)
            {
                ValidationError = "Expense cannot exceed total income.";
                return;
            }

            NewTransaction.Type = SelectedType; // Set the type of the transaction
            bool success = false;

            if (SelectedType == "income")
            {
                success = TransactionServices.AddIncome(loggedInUser.UserId, NewTransaction);
            }
            else if (SelectedType == "expense")
            {
                success = TransactionServices.AddExpense(loggedInUser.UserId, NewTransaction);
            }

            if (success)
            {
                Console.WriteLine("Transaction added successfully!");
                NewTransaction = new TransactionModel(); // Clear form
                SelectedType = string.Empty; // Reset type
                RefreshTransactions(loggedInUser.UserId);
            }
            else
            {
                ValidationError = "Failed to add transaction. Please try again.";
            }
        }
        else
        {
            ValidationError = "Invalid user or transaction type.";
        }
    }
    private void SearchTransaction(string query)
    {
        // Reset the filtered transactions list based on the search query
        FilteredTransactions = new List<TransactionModel>();

        foreach (var transaction in Transactions)
        {
            if (!string.IsNullOrWhiteSpace(query) && transaction.Tags.Contains(query, StringComparison.OrdinalIgnoreCase))
            {
                FilteredTransactions.Add(transaction);
            }
        }

        // If the query is empty, show all transactions
        if (string.IsNullOrWhiteSpace(query))
        {
            FilteredTransactions = new List<TransactionModel>(Transactions);
        }

        // Reset the index
        TransactionIndex = 1;
        StateHasChanged(); // Trigger UI refresh
    }


    private void FilterTransactions(ChangeEventArgs e)
    {
        var filter = e.Value.ToString();
        FilteredTransactions = filter switch
        {
            "income" => Transactions.Where(t => t.Type == "income").ToList(),
            "expense" => Transactions.Where(t => t.Type == "expense").ToList(),
            _ => Transactions
        };

        TransactionIndex = 1; // Reset serial numbers
        CalculateTotals();
    }

    private void CalculateTotals()
    {
        TotalIncome = Transactions.Where(t => t.Type == "income").Sum(t => t.Amount);
        TotalExpenses = Transactions.Where(t => t.Type == "expense").Sum(t => t.Amount);
    }
}
