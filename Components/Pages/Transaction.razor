@page "/transaction"

@using WiseWallet.Components.Layout
@using WiseWallet.Models
@using WiseWallet.Services

<NavBar />

<div class="container py-4">
    <div class="row">
        <!-- Form Section -->
        <div class="col-md-4">
            <div class="card border-warning">
                <div class="card-body">
                    <h5 class="card-title">Add the Transaction</h5>
                    <p class="card-text text-muted">Now it's easy to track your transaction</p>
                    <form>
                        <div class="mb-3">
                            <label for="date" class="form-label">Date</label>
                            <input type="date" class="form-control" id="date" @bind="NewTransaction.Date">
                        </div>
                        <div class="mb-3">
                            <label for="type" class="form-label">Type</label>
                            <select class="form-select" id="type" @bind="SelectedType">
                                <option value="">Select Type</option>
                                <option value="income">Income</option>
                                <option value="expense">Expense</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="tags" class="form-label">Tags</label>
                            <input type="text" class="form-control" id="tags" placeholder="Enter tags" @bind="NewTransaction.Tags">
                        </div>
                        <div class="mb-3">
                            <label for="amount" class="form-label">Amount</label>
                            <input type="number" class="form-control" id="amount" placeholder="Enter amount" @bind="NewTransaction.Amount">
                        </div>
                        <div class="mb-3">
                            <label for="note" class="form-label">Add the note</label>
                            <textarea class="form-control" id="note" rows="2" placeholder="Enter note" @bind="NewTransaction.Note"></textarea>
                        </div>
                        <button type="button" class="btn btn-warning w-100" @onclick="SubmitTransactionForm">Add Cash</button>
                    </form>
                </div>
            </div>
        </div>

        <!-- Table Section -->
        <div class="col-md-8">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h5>Total Income: Rs @TotalIncome</h5>
                <h5>Total Expenses: Rs @TotalExpenses</h5>
                <div class="filter">
                    <label for="filter" class="me-2">Filter</label>
                    <select class="form-select form-select-sm d-inline w-auto" id="filter" @onchange="FilterTransactions">
                        <option value="all">All</option>
                        <option value="income">Income</option>
                        <option value="expense">Expense</option>
                    </select>
                </div>
            </div>
            <div class="card border-warning">
                <div class="card-body p-0">
                    <table class="table table-bordered table-hover mb-0">
                        <thead class="table-warning">
                            <tr>
                                <th>S.No</th>
                                <th>Date</th>
                                <th>Type</th>
                                <th>Tags</th>
                                <th>Amount</th>
                                <th>Note</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (FilteredTransactions == null || !FilteredTransactions.Any())
                            {
                                <tr>
                                    <td colspan="6" class="text-center">No transactions found.</td>
                                </tr>
                            }
                            else
                            {
                                @foreach (var transaction in FilteredTransactions)
                                {
                                    <tr>
                                        <td>@TransactionIndex++</td>
                                        <td>@transaction.Date.ToShortDateString()</td>
                                        <td>@transaction.Type</td>
                                        <td>@transaction.Tags</td>
                                        <td>Rs @transaction.Amount</td>
                                        <td>@transaction.Note</td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private TransactionModel NewTransaction = new();
    private string SelectedType = string.Empty;
    private List<TransactionModel> Transactions = new();
    private List<TransactionModel> FilteredTransactions = new();
    private int TransactionIndex = 1; // For serial numbers
    private decimal TotalIncome;
    private decimal TotalExpenses;

    protected override void OnInitialized()
    {
        var loggedInUser = LoginServices.GetLoggedInUser();
        if (loggedInUser != null)
        {
            RefreshTransactions(loggedInUser.UserId);
        }
        else
        {
            Console.WriteLine("No user is logged in. Cannot fetch transactions.");
        }
    }

    private void RefreshTransactions(int userId)
    {
        Transactions = TransactionServices.GetUserTransactions(userId);
        FilteredTransactions = Transactions;
        CalculateTotals();
    }

    private void SubmitTransactionForm()
    {
        var loggedInUser = LoginServices.GetLoggedInUser();

        if (loggedInUser != null && !string.IsNullOrEmpty(SelectedType))
        {
            NewTransaction.Type = SelectedType; // Set the type of the transaction
            bool success = false;

            if (SelectedType == "income")
            {
                success = TransactionServices.AddIncome(loggedInUser.UserId, NewTransaction);
            }
            else if (SelectedType == "expense")
            {
                success = TransactionServices.AddExpense(loggedInUser.UserId, NewTransaction);
            }

            if (success)
            {
                Console.WriteLine("Transaction added successfully!");
                NewTransaction = new TransactionModel(); // Clear form
                SelectedType = string.Empty; // Reset type
                RefreshTransactions(loggedInUser.UserId);
            }
            else
            {
                Console.WriteLine("Failed to add transaction.");
            }
        }
        else
        {
            Console.WriteLine("Invalid user or transaction type.");
        }
    }

    private void FilterTransactions(ChangeEventArgs e)
    {
        var filter = e.Value.ToString();
        FilteredTransactions = filter switch
        {
            "income" => Transactions.Where(t => t.Type == "income").ToList(),
            "expense" => Transactions.Where(t => t.Type == "expense").ToList(),
            _ => Transactions
        };

        TransactionIndex = 1; // Reset serial numbers
        CalculateTotals();
    }

    private void CalculateTotals()
    {
        TotalIncome = Transactions.Where(t => t.Type == "income").Sum(t => t.Amount);
        TotalExpenses = Transactions.Where(t => t.Type == "expense").Sum(t => t.Amount);
    }
}
