@page "/debt"

@using WiseWallet.Components.Layout
@using WiseWallet.Models
@using WiseWallet.Services

<NavBar />

<div class="container py-4">
    <div class="row">
        <!-- Form Section -->
        <div class="col-md-4">
            <div class="card border-warning">
                <div class="card-body">
                    <h5 class="card-title">Record Your Debt</h5>
                    <p class="card-text text-muted">Now it's easy to track your transaction</p>
                    <form>
                        <div class="mb-3">
                            <label for="date-taken" class="form-label">Date Taken</label>
                            <input type="date" class="form-control" id="date-taken" @bind="NewDebt.DateTaken">
                        </div>
                        <div class="mb-3">
                            <label for="due-date" class="form-label">Due Date</label>
                            <input type="date" class="form-control" id="due-date" @bind="NewDebt.DueDate">
                        </div>
                        <div class="mb-3">
                            <label for="source" class="form-label">Source</label>
                            <input type="text" class="form-control" id="source" @bind="NewDebt.Source">
                        </div>
                        <div class="mb-3">
                            <label for="tags" class="form-label">Tags</label>
                            <input type="text" class="form-control" id="tags" @bind="NewDebt.Tags">
                        </div>
                        <div class="mb-3">
                            <label for="amount" class="form-label">Amount</label>
                            <input type="number" class="form-control" id="amount" @bind="NewDebt.Amount">
                        </div>
                        <div class="mb-3">
                            <label for="note" class="form-label">Add the Note</label>
                            <textarea class="form-control" id="note" rows="2" @bind="NewDebt.Note"></textarea>
                        </div>
                        <button type="button" class="btn btn-warning w-100" @onclick="SubmitDebtForm">Add Debt</button>
                    </form>
                </div>
            </div>
        </div>

        <!-- Details Table Section -->
        <div class="col-md-8">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h5>Total: Rs @TotalAmount</h5>
                <div class="filter">
                    <label for="filter" class="me-2">Filter</label>
                    <select class="form-select form-select-sm d-inline w-auto" id="filter" @onchange="FilterDebts">
                        <option value="all">All</option>
                        <option value="unpaid">Unpaid</option>
                        <option value="paid">Paid</option>
                    </select>
                </div>
            </div>
            <div class="card border-warning">
                <div class="card-body p-0">
                    <table class="table table-bordered table-hover mb-0">
                        <thead class="table-warning">
                            <tr>
                                <th>S.No</th>
                                <th>Taken</th>
                                <th>Due</th>
                                <th>Source</th>
                                <th>Tags</th>
                                <th>Amount</th>
                                <th>Status</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (FilteredDebts == null || !FilteredDebts.Any())
                            {
                                <tr>
                                    <td colspan="8" class="text-center">No debts found.</td>
                                </tr>
                            }
                            else
                            {
                                @foreach (var debt in FilteredDebts)
                                {
                                    <tr>
                                        <td>@DebtIndex++</td>
                                        <td>@debt.DateTaken.ToShortDateString()</td>
                                        <td>@debt.DueDate.ToShortDateString()</td>
                                        <td>@debt.Source</td>
                                        <td>@debt.Tags</td>
                                        <td>Rs @debt.Amount</td>
                                        <td>@debt.Status</td>
                                        <td>
                                            @if (debt.Status == "Unpaid")
                                            {
                                                <button class="btn btn-sm btn-danger" @onclick="() => MarkDebtAsPaid(debt)">Clear Debt</button>
                                            }
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private DebtModel NewDebt = new();
    private List<DebtModel> Debts = new();
    private List<DebtModel> FilteredDebts = new();
    private int DebtIndex = 1; // For serial numbers
    private int CurrentUserId;
    private decimal TotalAmount;

    private void SubmitDebtForm()
    {
        var loggedInUser = LoginServices.GetLoggedInUser();

        if (loggedInUser != null)
        {
            CurrentUserId = loggedInUser.UserId;
            NewDebt.Status = "Unpaid";

            if (DebtServices.AddDebt(CurrentUserId, NewDebt))
            {
                Console.WriteLine("Debt added successfully!");
                NewDebt = new DebtModel(); // Clear the form
                RefreshDebts();
            }
            else
            {
                Console.WriteLine("Failed to add debt.");
            }
        }
        else
        {
            Console.WriteLine("No user is logged in. Cannot add debt.");
        }
    }

    protected override void OnInitialized()
    {
        var loggedInUser = LoginServices.GetLoggedInUser();
        if (loggedInUser != null)
        {
            CurrentUserId = loggedInUser.UserId;
            RefreshDebts();
        }
        else
        {
            Console.WriteLine("No user is logged in. Cannot fetch debts.");
        }
    }

    private void RefreshDebts()
    {
        Debts = DebtServices.GetUserDebts(CurrentUserId);
        FilteredDebts = Debts;
        CalculateTotalAmount();
    }

    private void FilterDebts(ChangeEventArgs e)
    {
        var filter = e.Value.ToString();
        FilteredDebts = filter switch
        {
            "paid" => Debts.Where(d => d.Status == "Paid").ToList(),
            "unpaid" => Debts.Where(d => d.Status == "Unpaid").ToList(),
            _ => Debts
        };

        DebtIndex = 1; // Reset serial numbers
        CalculateTotalAmount();
    }

    private void MarkDebtAsPaid(DebtModel debt)
    {
        debt.Status = "Paid";
        DebtServices.UpdateDebt(CurrentUserId, debt);
        RefreshDebts();
    }

    private void CalculateTotalAmount()
    {
        TotalAmount = FilteredDebts.Sum(d => d.Amount);
    }
}
